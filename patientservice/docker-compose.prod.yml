services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile.prod
      args:
        - NX_BUILD_TARGET=backend:package
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/fimoevents
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fimo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.prod
      args:
        - NX_BUILD_TARGET=frontend:build
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://localhost:8080/api
    depends_on:
      - backend
    networks:
      - fimo-network
    restart: unless-stopped

  # Database Service
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=fimoevents
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./apps/backend/db/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d fimoevents"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - fimo-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - fimo-network
    restart: unless-stopped
    profiles:
      - proxy

  # Redis for caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis_prod_data:/data
    networks:
      - fimo-network
    restart: unless-stopped
    profiles:
      - cache

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  fimo-network:
    driver: bridge 